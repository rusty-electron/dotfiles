* Minor setting
** general
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-message t)
#+end_src
** ask before quitting
#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src
** subword
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
** electric pairs
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              ))

  (electric-pair-mode t)
#+end_src
** show lines and columns
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** clock
#+begin_src emacs-lisp
  (display-time-mode 1)
#+end_src
** tabsize
#+begin_src emacs-lisp
  (setq tab-width 8)
#+end_src
** visual line mode (wordwrap)
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src
* Terminal
** Setting default shell to bash
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src
* LSP
** install lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook (
           (python-mode . lsp-deferred)
    ;; which key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp lsp-deferred)
#+end_src
** lsp-pyright [python]
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp-deferred))))  ; or lsp-deferred
  (setq lsp-pyright-venv-path "~/miniconda3/envs")
#+end_src
* Org
** basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** enable org-indent in org-mode
#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src
** org snippets
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp\n"))
#+end_src

* hungry-delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
* sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+end_src
* dashboard
** enable dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-items '((recents . 5) (projects . 5)))
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "Hello Pritom!"))

#+end_src
* IDO
** enable IDO mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** IDO-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
  ("M-x" . smex))
#+end_src
** switch buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* buffers
** enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** always kill
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src
** kill all buffers
   #+begin_src emacs-lisp
     (defun kill-all-buffers ()
       (interactive)
       (mapc 'kill-buffer (buffer-list)))
     (global-set-key (kbd "C-M-k") 'kill-all-buffers)
   #+end_src
* avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* beacon
** install and enable [disabled]
#+begin_src emacs-lisp
  ;;(use-package beacon
  ;;  :ensure t
  ;;  :init
  ;;  (beacon-mode 1))
#+end_src
* convenient function
** kill-whole-word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src
** copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))

  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src
* auto-indent
enable auto-indent
#+begin_src emacs-lisp
  (electric-indent-mode t)

  ;; may use it elsewhere
  (defun remove-electric-indent-mode ()
    (electric-indent-local-mode -1))

  (add-hook 'org-mode-hook 'remove-electric-indent-mode)
#+end_src
* which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* config edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* rainbow
** set colours #FFF
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src
** bracket delimiter
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t)
  ;; enable in org-mode and prog-mode
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
#+end_src
* switch-window
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" ";"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* window splitting function
** vanilla emacs
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
* auto completion
** company-mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
* modeline
** spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** diminish modes
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode))
#+end_src
* symon
#+begin_src emacs-lisp
  (use-package symon
    :ensure t)
#+end_src
* emacs-rotate
#+begin_src emacs-lisp
  (use-package rotate
    :ensure t)
#+end_src
* evil-mode
** evil indent
#+begin_src emacs-lisp
  (setq-default evil-auto-indent nil)
#+end_src
** enable evil-mode
#+begin_src emacs-lisp
  ;; enable evil-mode
  (require 'evil)
  (evil-mode 1)
#+end_src
** set up <C-r> - redo
#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t)
  ;; (global-undo-tree-mode)
  (evil-set-undo-system 'undo-fu)
#+end_src
** leader key
#+begin_src emacs-lisp
  ;; to make leader key work in dired mode
  (require 'dired)
  (define-key dired-mode-map (kbd "SPC") nil)
  ;; set leader key
  (evil-set-leader 'motion (kbd "SPC"))
#+end_src
** leader bindings
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader> of") 'dired)
  (evil-define-key 'normal 'global (kbd "<leader> bl") 'ido-switch-buffer)
  (evil-define-key 'normal 'global (kbd "<leader> qq") 'keyboard-quit)
  (evil-define-key 'normal 'global (kbd "<leader> bk") 'kill-curr-buffer)
#+end_src

*** emacs-rotate specific
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader> rw") 'rotate-window)
  (evil-define-key 'normal 'global (kbd "<leader> rl") 'rotate-layout)
#+end_src
** better evil split
#+begin_src emacs-lisp
  (evil-ex-define-cmd "xsplit" 'split-and-follow-horizontally)
  (evil-ex-define-cmd "ysplit" 'split-and-follow-vertically)
#+end_src
** evil-keys in ibuffer
#+begin_src emacs-lisp
  (evil-set-initial-state 'ibuffer-mode 'normal)
#+end_src
** avy-evil
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader> j") 'avy-goto-char)
#+end_src
* fzf file search
** install fzf
#+begin_src emacs-lisp
  (use-package fzf
    :ensure t)
#+end_src
** open file from ~/
#+begin_src emacs-lisp
  ;; set default fzf command
  (defun home-fzf-file ()
    (interactive)
    (setenv "FZF_DEFAULT_COMMAND" "rg --files --hidden")
    (fzf-find-file "~/"))
  (evil-define-key 'normal 'global (kbd "<leader> fz") 'home-fzf-file)
  ;; (evil-define-key 'normal 'global (kbd "<leader> fd") 'fzf-directory "~/")
#+end_src
** open dired from ~/
#+begin_src emacs-lisp
  (defun home-fzf-dir()
    (interactive)
    (setenv "FZF_DEFAULT_COMMAND" "fd . -H -t d")
    (fzf-find-file "~/"))
  (evil-define-key 'normal 'global (kbd "<leader> od") 'home-fzf-dir)
#+end_src
* markdown
** install markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

* projectile
** install projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+end_src
** project search paths
#+begin_src emacs-lisp
  (setq projectile-project-search-path '("~/myfiles/projects/github/"))
#+end_src
* killring
** install and enable
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src

* shell-pop
** install and enable
#+begin_src emacs-lisp
  (use-package shell-pop
    :ensure t
    :bind (("C-c t" . shell-pop))
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/bin/bash")
    (setq shell-pop-window-size 30)
    (setq shell-pop-full-span t)
    (setq shell-pop-window-position "bottom")
    (setq shell-pop-autocd-to-working-dir t)
    (setq shell-pop-restore-window-configuration t)
    (setq shell-pop-cleanup-buffer-at-process-exit t)
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type)
    (setq shell-pop-universal-key "C-c t"))
#+end_src
* line numbers
** only prog mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src
* indentation-guides
** only prog-mode
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
#+end_src

