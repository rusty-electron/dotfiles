#!/bin/sh

# Prints all batteries, their percentage remaining and an emoji corresponding
# to charge status (🔌 for plugged up, 🔋 for discharging on battery, etc.).

case $BLOCK_BUTTON in
	1) notify-send -u low "Battery status" "$(acpi | cut -d ' ' -f5-)" ;;
	3) notify-send -u low -i none "🔋 Battery module" "🔋: discharging
🛑: not charging
♻: stagnant charge
🔌: charging
⚡: charged
❗: battery very low!
- Scroll to change adjust xbacklight." ;;
	4) sudo xbacklight -inc 5 ;;
	5) sudo xbacklight -dec 5 ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

#acpi alternative
#acpi | sed "s/Battery [0-9]: //;s/[Dd]ischarging, / /;s/[Nn]ot charging, /🛑 /;s/[Cc]harging, / /;s/[Uu]nknown, /♻️ /;s/[Ff]ull, / /;s/ \(remaining\|until charged\)//"; exit

# Check if battery directories are detected
[ ! -e /sys/class/power_supply/BAT?* ] && echo "No battery found" && exit 1

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*
do
	# Sets up the status and capacity
	status=$(cat "$battery/status")
	case "$status" in
		"Full") status=" " ;;
		"Discharging") status=" " ;;
		"Charging") status=" " ;;
		"Not charging") status=" " ;;
		"Unknown") status=" " ;;
	esac
	capacity=$(cat "$battery/capacity")
	# Will make a warn variable if discharging and low
	[ "$status" = " " ] && [ "$capacity" -le 20 ] && warn='❗'
	# Prints the info
	printf "%s%s%d%%\n" "$warn" "$status" "$capacity"; unset warn
done && return 0
